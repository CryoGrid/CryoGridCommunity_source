classdef ENSEMBLE_general < matlab.mixin.Copyable


    properties
        PARA
        CONST
        STATVAR
    end
    
    methods
        
 function ensemble = provide_PARA(ensemble) 

            ensemble.PARA.gaussian_variables_name= [];
            ensemble.PARA.gaussian_variables_center= [];
            ensemble.PARA.gaussian_variables_width= [];
            ensemble.PARA.gaussian_variables_hard_lower_limit = [];
            ensemble.PARA.gaussian_variables_hard_upper_limit = [];
            
            ensemble.PARA.boxcar_variables_name = [];
            ensemble.PARA.boxcar_variables_lower_bound = [];
            ensemble.PARA.boxcar_variables_upper_bound = [];
            ensemble.PARA.boxcar_variables_hard_lower_limit = [];
            ensemble.PARA.boxcar_variables_hard_upper_limit = [];
            
            ensemble.PARA.modify_class_name = [];
            ensemble.PARA.modify_class_index = [];
            ensemble.PARA.variable_in_ensemble = [];
            ensemble.PARA.variable_in_class = [];
        end
        
        function ensemble = provide_CONST(ensemble)

        end
        
        function ensemble = provide_STATVAR(ensemble)

        end 
        
        
        function ensemble = finalize_init(ensemble, tile)
            
%            rng(round(now)) %use current time as seed for randum number generator, i.e. same sequence of random numbers will be generated by each worker


            for i=1:size(ensemble.PARA.gaussian_variables_name,1)
                ensemble.STATVAR.(ensemble.PARA.gaussian_variables_name{i,1}) = ensemble.PARA.gaussian_variables_center(i,1) + randn(1,tile.PARA.ensemble_size) .* ensemble.PARA.gaussian_variables_width(i,1);
                ensemble.STATVAR.(ensemble.PARA.gaussian_variables_name{i,1}) = ensemble.STATVAR.(ensemble.PARA.gaussian_variables_name{i,1})(1,tile.PARA.worker_number);
                ensemble.STATVAR.(ensemble.PARA.gaussian_variables_name{i,1}) = max(ensemble.PARA.gaussian_variables_hard_lower_limit(i,1), ensemble.STATVAR.(ensemble.PARA.gaussian_variables_name{i,1}));
                ensemble.STATVAR.(ensemble.PARA.gaussian_variables_name{i,1}) = min(ensemble.PARA.gaussian_variables_hard_upper_limit(i,1), ensemble.STATVAR.(ensemble.PARA.gaussian_variables_name{i,1}));
            end
            for i=1:size(ensemble.PARA.boxcar_variables_name,1)
                ensemble.PARA.boxcar_variables_lower_bound(i,1) = max(ensemble.PARA.boxcar_variables_hard_lower_limit(i,1), ensemble.PARA.boxcar_variables_lower_bound(i,1));
                ensemble.PARA.boxcar_variables_upper_bound(i,1) = min(ensemble.PARA.boxcar_variables_hard_upper_limit(i,1), ensemble.PARA.boxcar_variables_upper_bound(i,1));                
                ensemble.STATVAR.(ensemble.PARA.boxcar_variables_name{i,1}) = ensemble.PARA.boxcar_variables_lower_bound(i,1) + rand(1,tile.PARA.ensemble_size) .* (ensemble.PARA.boxcar_variables_upper_bound(i,1) - ensemble.PARA.boxcar_variables_lower_bound(i,1));
                ensemble.STATVAR.(ensemble.PARA.boxcar_variables_name{i,1}) = ensemble.STATVAR.(ensemble.PARA.boxcar_variables_name{i,1})(1,tile.PARA.worker_number);
%                 ensemble.STATVAR.(ensemble.PARA.boxcar_variables_name{i,1}) = max(ensemble.PARA.boxcar_variables_hard_lower_limit(i,1), ensemble.STATVAR.(ensemble.PARA.boxcar_variables_name{i,1}));
%                 ensemble.STATVAR.(ensemble.PARA.boxcar_variables_name{i,1}) = min(ensemble.PARA.boxcar_variables_hard_upper_limit(i,1), ensemble.STATVAR.(ensemble.PARA.boxcar_variables_name{i,1}));
            end

            %write variables in PROVIDER
            for i=1:size(ensemble.PARA.modify_class_name,1)
                tile.RUN_INFO.PPROVIDER.CLASSES.(ensemble.PARA.modify_class_name{i,1}){ensemble.PARA.modify_class_index(i,1),1}.PARA.(ensemble.PARA.variable_in_class{i,1}) = ...
                    ensemble.STATVAR.(ensemble.PARA.variable_in_ensemble{i,1});
            end
                      
        end
        
        %add possibility to restrict the variables only to the ones which should be changed       
        function ensemble = recalculate_ensemble_parameters_after_DA(ensemble, tile, variable_list)
            %recalculate ensemble parameters based on DA weights and
            %previous ensemble-the new variable centers and widths are set
            %by the DA class, plus the variables that are affected by the
            %DA
   
           % rng(tile.t)
            
            for i=1:size(ensemble.PARA.gaussian_variables_name,1)
                if any(strcmp(variable_list, ensemble.PARA.gaussian_variables_name{i,1}))
                    ensemble.STATVAR.(ensemble.PARA.gaussian_variables_name{i,1}) = ensemble.PARA.gaussian_variables_center(i,1) + randn(1,tile.PARA.ensemble_size) .* ensemble.PARA.gaussian_variables_width(i,1);
                    ensemble.STATVAR.(ensemble.PARA.gaussian_variables_name{i,1}) = ensemble.STATVAR.(ensemble.PARA.gaussian_variables_name{i,1})(1,tile.PARA.worker_number);
                    ensemble.STATVAR.(ensemble.PARA.gaussian_variables_name{i,1}) = max(ensemble.PARA.gaussian_variables_hard_lower_limit(i,1), ensemble.STATVAR.(ensemble.PARA.gaussian_variables_name{i,1}));
                    ensemble.STATVAR.(ensemble.PARA.gaussian_variables_name{i,1}) = min(ensemble.PARA.gaussian_variables_hard_upper_limit(i,1), ensemble.STATVAR.(ensemble.PARA.gaussian_variables_name{i,1}));
                end
            end
            for i=1:size(ensemble.PARA.boxcar_variables_name,1)
                if any(strcmp(variable_list, ensemble.PARA.boxcar_variables_name{i,1}))
                    ensemble.PARA.boxcar_variables_lower_bound(i,1) = max(ensemble.PARA.boxcar_variables_hard_lower_limit(i,1), ensemble.PARA.boxcar_variables_lower_bound(i,1));
                    ensemble.PARA.boxcar_variables_upper_bound(i,1) = min(ensemble.PARA.boxcar_variables_hard_upper_limit(i,1), ensemble.PARA.boxcar_variables_upper_bound(i,1));
                    ensemble.STATVAR.(ensemble.PARA.boxcar_variables_name{i,1}) = ensemble.PARA.boxcar_variables_lower_bound(i,1) + rand(1,tile.PARA.ensemble_size) .* (ensemble.PARA.boxcar_variables_upper_bound(i,1) - ensemble.PARA.boxcar_variables_lower_bound(i,1));
                    ensemble.STATVAR.(ensemble.PARA.boxcar_variables_name{i,1}) = ensemble.STATVAR.(ensemble.PARA.boxcar_variables_name{i,1})(1,tile.PARA.worker_number);
%                     ensemble.STATVAR.(ensemble.PARA.boxcar_variables_name{i,1}) = max(ensemble.PARA.boxcar_variables_hard_lower_limit(i,1), ensemble.STATVAR.(ensemble.PARA.boxcar_variables_name{i,1}));
%                     ensemble.STATVAR.(ensemble.PARA.boxcar_variables_name{i,1}) = min(ensemble.PARA.boxcar_variables_hard_upper_limit(i,1), ensemble.STATVAR.(ensemble.PARA.boxcar_variables_name{i,1}));
                end
            end
            

            
            %establish pointers to all classes in the stratigraphy
            ensemble = set_pointers2classes(ensemble, tile);
            
            %rewrite PARA in PROVIDER and all classes in the
            %stratigraphy
            for i=1:size(ensemble.PARA.modify_class_name,1)
                if any(strcmp(variable_list, ensemble.PARA.variable_in_ensemble{i,1}))
                    tile.RUN_INFO.PPROVIDER.CLASSES.(ensemble.PARA.modify_class_name{i,1}){ensemble.PARA.modify_class_index(i,1),1}.PARA.(ensemble.PARA.variable_in_class{i,1}) = ...
                        ensemble.STATVAR.(ensemble.PARA.variable_in_ensemble{i,1});
                    for j=1:size(ensemble.PARA.modify_class_pointer{i,1})
                        ensemble.PARA.modify_class_pointer{i,1}(j,1).PARA.(ensemble.PARA.variable_in_class{i,1}) = ensemble.STATVAR.(ensemble.PARA.variable_in_ensemble{i,1});
                    end
                end
            end
            
            ensemble.PARA.modify_class_pointer = [];
        end
        
        function ensemble = set_pointers2classes(ensemble, tile)
            for i=1:size(ensemble.PARA.modify_class_name,1)
                ensemble.PARA.modify_class_pointer{i,1} = {};
            end
            
            ensemble = find_classes_in_variable(ensemble, tile, 1);
            
        end
        
        function ensemble = find_classes_in_variable(ensemble, current_class, level)
            class_name = class(current_class);
            if isobject(current_class)
                for i=1:size(ensemble.PARA.modify_class_name, 1)
                    if strcmp(ensemble.PARA.modify_class_name{i,1}, class_name)
                        if  ensemble.PARA.modify_class_index(i,1) == current_class.PARA.class_index
                            dec = 1;
                            for j=1:size(ensemble.PARA.modify_class_pointer{i,1}, 1)
                                if isequal(ensemble.PARA.modify_class_pointer{i,1}(j,1), current_class)
                                    dec = 0;
                                end
                            end
                            if dec
                                ensemble.PARA.modify_class_pointer{i,1} = [ensemble.PARA.modify_class_pointer{i,1}; current_class];
                            end
                        end
                    end
                end
            end
            if isstruct(current_class) || isobject(current_class)
                variables = fieldnames(current_class);
                for i = 1:size(variables,1)
                    if iscell(current_class.(variables{i,1}))
                        if level <= 5
                            for j=1:size(current_class.(variables{i,1}), 1)
                                for k=1:size(current_class.(variables{i,1}), 2)
                                    ensemble = find_classes_in_variable(ensemble, current_class.(variables{i,1}){j,k}, level+1);
                                end
                            end
                        end
                    elseif isstruct(current_class.(variables{i,1}))
                        if level <= 5
                            ensemble = find_classes_in_variable(ensemble, current_class.(variables{i,1}), level+1);
                        end
                    elseif isobject(current_class.(variables{i,1})) && ~strcmp(variables{i,1}, 'RUN_INFO')
                        if level <= 5
                            ensemble = find_classes_in_variable(ensemble, current_class.(variables{i,1}), level+1);
                        end
                    end
                end
            end
        end
        
        %returns the current values of a variable for storage in the da
        %class
        function result = get_variable_info(ensemble, variable)
            result.value=ensemble.STATVAR.(variable);
            if any(strcmp(ensemble.PARA.gaussian_variables_name,variable))
                pos = find(strcmp(ensemble.PARA.gaussian_variables_name,variable));
                result.gaussian_variables_center = ensemble.PARA.gaussian_variables_center(pos,1);
                result.gaussian_variables_width = ensemble.PARA.gaussian_variables_width(pos,1);
            elseif any(strcmp(ensemble.PARA.boxcar_variables_name,variable))
                pos = find(strcmp(ensemble.PARA.boxcar_variables_name,variable));
                result.boxcar_variables_lower_bound = ensemble.PARA.boxcar_variables_lower_bound(pos,1);
                result.boxcar_variables_upper_bound = ensemble.PARA.boxcar_variables_upper_bound(pos,1);
            end
        end

    end
end

